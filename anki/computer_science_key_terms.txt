<b>abstract data type</b>&nbsp;(<b>ADT</b>)<br>	A&nbsp;mathematical model&nbsp;for&nbsp;data types, where a data type is defined by its behavior (semantics) from the point of view of a&nbsp;<i>user</i>&nbsp;of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations.<br>	
Abstraction<br>	A technique for arranging complexity of computer systems. It works by establishing a level of complexity on which a person interacts with the system, suppressing the more complex&nbsp;details below the current level.<br>	
<b>Algorithm</b><br>	A well-defined procedure that allows a&nbsp;<b>computer</b>&nbsp;to solve a problem. A particular problem can typically be solved by more than one&nbsp;<b>algorithm</b>. Optimization is the process of finding the most efficient&nbsp;<b>algorithm</b>&nbsp;for a given task.<br>	
Class	An extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods).<br>	
Computable<br>	Some algorithm that computes an answer (or output) to any instance of the problem (or for any input to the function) in a finite number of simple steps.<br>	
Data Abstraction	<em>Data abstraction</em>&nbsp;is the reduction of a particular body of&nbsp;<em>data</em>&nbsp;to a simplified representation of the whole.&nbsp;<em>Abstraction</em>, in general, is the process of taking away or removing characteristics from something in order to reduce it to a set of essential characteristics.<br>	
<b>Data Structure</b><br>	A&nbsp;<b>data&nbsp;</b>organization, management, and storage format that enables efficient access and modification. More precisely, a&nbsp;<b>data structure</b>&nbsp;is a collection of&nbsp;<b>data&nbsp;</b>values, the relationships among them, and the functions or operations that can be applied to the&nbsp;<b>data</b>.<br>	
Data Type	An attribute of&nbsp;<em>data&nbsp;</em>which tells the compiler or interpreter how the programmer intends to use the&nbsp;<em>data</em>. Most programming languages support common&nbsp;<em>data types</em>&nbsp;of real, integer and boolean.<br>	
Deep Equality	Compare contents of your objects recursively until all you need to compare is primitive fields.<br>	
Dictionary	Maps a set of objects (keys) to another set of objects (values). A&nbsp;<b>Python dictionary</b>&nbsp;is a mapping of unique keys to values. Dictionaries are mutable, which means they can be changed. The values that the keys point to can be any&nbsp;<b>Python</b>&nbsp;value.<br>	
Encapsulation<br>	• A language mechanism for restricting direct access to some of the&nbsp;object's components.<div><br><div>• A language construct that facilitates the bundling of data with the&nbsp;methods&nbsp;(or other functions) operating on that data.<br></div></div>	
<b>Exception handling</b>&nbsp;<br>	The process of responding to the occurrence, during&nbsp;computation, of&nbsp;<i>exceptions</i>&nbsp;– anomalous or exceptional conditions requiring special processing – often disrupting the normal flow of&nbsp;program&nbsp;execution.<br>	
Format Operator<br>	"The ""<b>%</b>"" operator in <b>Python</b> is used to format a set of variables enclosed in a ""tuple"" (a fixed size list), together with a format string, which contains normal text together with ""argument specifiers"", special symbols like ""<b>%s</b>"" and ""<b>%d</b>"".<br><div><br></div><div># This prints out ""John is 23 years old.""<br>name = ""John""<br>age = 23<br><b>print(""%s is %d years old."" % (name, age))</b><br></div>"	
Formatted Strings<br>	<div><b>printf format string</b>&nbsp;refers to a control parameter used by a class of&nbsp;functions&nbsp;in the input/output libraries of&nbsp;C&nbsp;and many other&nbsp;programming languages. The string is written in a simple&nbsp;template language: characters are usually copied literally into the function's output, but&nbsp;<b>format specifiers</b>, which start with a&nbsp;%&nbsp;character, indicate the location and method to translate a piece of data (such as a number) to characters.</div><br>	
HAS-A relationship<br>	<b>&nbsp;HAS - A relationship is composition.</b><br><div><div>Composition means creating instances which have references to other objects. For example, a room has a table. So you will create a class room and then in that class create an instance of type table.<br> </div><b> class Room{<br> Table table = new Table ();<br>  }</b><br> </div> 	
IS-A relationship<br>	<b>An IS-A relationship is inheritances.</b> The classes which inherit are known as sub classes or child classes. In OOP, <b>IS - A relationship is completely inheritance. </b>This means, that the child class is a type of parent class. For example, an apple is a fruit. So you will extend fruit to get apple.<p><b> class Apple extends Fruit {</b></p><p><b>...<br>  } </b><br> </p>	
implementation-independent<br>	The implementation of an abstract data type, often referred to as a&nbsp;<strong>data structure</strong>, will require that we provide a physical view of the data using some <b><i>collection of programming constructs</i></b> and <b><i>primitive data types</i></b>.&nbsp;<div>&nbsp; &nbsp; &nbsp; The separation of these two perspectives will allow us to define the complex data models for our problems without giving any indication as to the details of how the model will actually be built. This provides an&nbsp;<strong>implementation-independent</strong>&nbsp;view of the data.&nbsp;<div><br></div></div>	
Information hiding<br>	An&nbsp;<strong>abstract data type</strong>, sometimes abbreviated&nbsp;<strong>ADT</strong>, is a logical description of how we view the data and the operations that are allowed without regard to how they will be implemented. This means that we&nbsp;are concerned only with what the data is representing and not with how it will eventually be constructed. By providing this level of abstraction, we are creating an&nbsp;<strong>encapsulation</strong>&nbsp;around the data. The idea is that by encapsulating the details of the implementation, we are hiding them from the user’s view.&nbsp;<br>	
inheritance<br>	"In&nbsp;object-oriented programing&nbsp;(OOP) inheritance is a feature that represents the ""is a"" relationship between different&nbsp;classes. Inheritance allows a class to have the same behavior as another class and extend or tailor that behavior to provide special action for specific needs.<br>"	
inheritance hierarchy<br>	"A&nbsp;<b>class hierarchy</b>&nbsp;or&nbsp;<b>inheritance tree</b>&nbsp;in&nbsp;computer science&nbsp;is a classification of object types, denoting objects as the instantiations of&nbsp;classes&nbsp;(class is like a blueprint, the object is what is built from that blueprint) inter-relating the various classes by relationships such as ""inherits"", ""extends"", ""is an abstraction of"", ""an interface definition""<br>"	
Interface	Another definition for a <b>function</b>.	
List	In&nbsp;<b>Python</b>,&nbsp;<b>list</b>&nbsp;is a type of container in Data Structures, which is used to store multiple data at the same time. Unlike Sets, the&nbsp;<b>list in Python</b>&nbsp;are ordered and have a definite count. The elements in a&nbsp;<b>list</b>&nbsp;are indexed according to a definite sequence and the indexing of a&nbsp;<b>list</b>&nbsp;is done with 0 being the first index.<br>	
<b>List comprehension</b><br>	Used for creating new&nbsp;<b>list</b>&nbsp;from another iterables. As&nbsp;<b>list comprehension</b>&nbsp;returns&nbsp;<b>list</b>, they consists of brackets containing the expression which needs to be executed for each element along with the for loop to iterate over each element.<br>	
Method	<b>Method</b>&nbsp;is called by its name, but it is associated to an object (dependent). A&nbsp;<b>method</b>&nbsp;is implicitly passed the object on which it is invoked. It may or may not return any data. A&nbsp;<b>method</b>&nbsp;can operate on the data (instance variables) that is contained by the corresponding class.<br>	
mutability<br>	able to be modified.<br>	
object<br>	an abstraction of that can contain data as well as manipulate data<br>	
procedural abstraction<br>	The idea that each method should have a coherent conceptual description that separates its implementation from its users. You can encapsulate behavior in methods that are internal to an object or methods that are widely usable.<br>	
Self	<b>self</b>&nbsp;is an object reference to the object itself, therefore, they are same.&nbsp;<b>Python</b>&nbsp;methods are not called in the context of the object itself.&nbsp;<b>self</b>&nbsp;in<b>Python</b>&nbsp;may be used to deal with custom object models or something.<br>	
shallow equality<br>	"<div>Even though&nbsp;<font color=""#fc160f"">myfraction</font>&nbsp;and&nbsp;<font color=""#fc160f"">yourfraction</font>&nbsp;refer to the same rational number, they are not the same object.<br></div><div><img src=""fractionpic2.png""><br></div><div>If we assign&nbsp;<font color=""#fc160f"">myfraction</font>&nbsp;to&nbsp;<font color=""#fc160f"">ourfraction</font>, then the two variables are aliases of the same object.<br></div><img src=""fractionpic3.png""><br><p></p><div>This type of equality is called&nbsp;<strong>shallow equality</strong>&nbsp;because it compares only the references, not the contents of the objects. Using the == operator to check equality between two user defined objects will return the shallow equality result. In other words, the&nbsp;<font color=""#fc160f"">Fraction</font>&nbsp;objects are equal (==) if they are the same object.<br></div><p></p>"	
subclass	An inherited class is called a&nbsp;<em>subclass</em>&nbsp;of its parent class or super class.<br>	
superclass	&nbsp;In object-oriented programming, a class from which other classes inherit code is called a&nbsp;<em>superclass</em>, and the class that inherits the code is called a subclass of that&nbsp;<em>superclass</em>. Typically, a subclass inherits the instance variables and member functions of its&nbsp;<em>superclass</em>.<br>	
truth table	"<img src=""truthtable.png""><br>"	